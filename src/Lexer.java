/* The following code was generated by JFlex 1.6.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2000 Gerwin Klein <lsf@jflex.de>                          *
 * All rights reserved.                                                    *
 *                                                                         *
 * Thanks to Larry Bell and Bob Jamison for suggestions and comments.      *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\57\1\10\1\7\1\13\1\13\1\12\22\0\1\10\1\56"+
    "\4\0\1\47\1\0\1\41\1\42\1\54\1\4\1\46\1\52\1\2"+
    "\1\11\12\1\1\50\1\45\1\51\1\55\1\53\2\0\4\5\1\3"+
    "\25\5\1\43\1\0\1\44\1\0\1\6\1\0\1\31\1\27\1\23"+
    "\1\26\1\34\1\21\1\37\1\36\1\16\1\5\1\40\1\30\1\5"+
    "\1\17\1\25\1\14\1\5\1\15\1\32\1\20\1\22\1\24\1\35"+
    "\2\5\1\33\12\0\1\13\u1fa2\0\1\13\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\5"+
    "\16\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\1\1\16\1\5\2\16\1\1\1\17\1\20\1\6"+
    "\3\4\1\21\11\4\1\5\11\4\1\22\1\23\1\0"+
    "\1\24\1\0\2\4\1\25\1\26\14\4\1\27\2\4"+
    "\1\0\1\20\1\0\2\4\1\30\1\31\1\32\2\4"+
    "\1\33\1\4\1\34\1\4\1\35\1\4\1\36\1\4"+
    "\1\0\1\37\1\4\1\40\1\4\1\41\1\42\1\4"+
    "\1\43\1\0\1\44\1\4\1\45\1\0\1\4\1\46"+
    "\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\60\0\60\0\300"+
    "\0\360\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\60\0\u0450\0\60\0\u0480\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\220\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u0690\0\u06c0\0\u06f0\0\220\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\60\0\60"+
    "\0\u08d0\0\60\0\u0900\0\u0930\0\u0960\0\220\0\220\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\220\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\220\0\220\0\220\0\u0cf0\0\u0d20"+
    "\0\220\0\u0d50\0\220\0\u0d80\0\220\0\u0db0\0\220\0\u0de0"+
    "\0\u0e10\0\220\0\u0e40\0\220\0\u0e70\0\220\0\220\0\u0ea0"+
    "\0\220\0\u0ed0\0\220\0\u0f00\0\220\0\u0f30\0\u0f60\0\u0e10"+
    "\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\2\1\7"+
    "\1\10\1\11\1\10\1\2\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\5\1\20\1\21\1\22\1\5\1\23"+
    "\1\5\1\24\1\25\1\5\1\26\1\27\3\5\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\6\1\43\1\44\1\45\61\0\1\3"+
    "\1\46\56\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\25\5\27\0\1\10\1\0\1\10\56\0\1\47\47\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\1\5\1\50"+
    "\23\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\20\5\1\51\4\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\3\5\1\52\1\5\1\53\17\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\11\5\1\54"+
    "\6\5\1\55\4\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\1\5\1\56\20\5\1\57\2\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\6\5\1\60"+
    "\5\5\1\61\1\62\7\5\20\0\1\5\1\0\1\5"+
    "\1\0\2\5\5\0\11\5\1\63\13\5\20\0\1\5"+
    "\1\0\1\5\1\0\2\5\5\0\11\5\1\64\13\5"+
    "\20\0\1\5\1\0\1\5\1\0\2\5\5\0\1\5"+
    "\1\65\23\5\20\0\1\5\1\0\1\5\1\0\2\5"+
    "\5\0\1\5\1\66\7\5\1\67\6\5\1\70\4\5"+
    "\20\0\1\5\1\0\1\5\1\0\2\5\5\0\3\5"+
    "\1\71\21\5\20\0\1\5\1\0\1\5\1\0\2\5"+
    "\5\0\2\5\1\72\1\5\1\73\20\5\20\0\1\5"+
    "\1\0\1\5\1\0\2\5\5\0\3\5\1\74\10\5"+
    "\1\75\10\5\20\0\1\5\1\0\1\5\1\0\2\5"+
    "\5\0\22\5\1\76\2\5\67\0\1\77\61\0\1\100"+
    "\2\0\1\43\1\101\54\0\1\102\61\0\1\43\3\0"+
    "\1\46\1\0\1\103\54\0\7\47\1\0\2\47\2\0"+
    "\44\47\1\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\2\5\1\104\22\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\4\5\1\105\20\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\4\5\1\106\20\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\4\5\1\65"+
    "\20\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\21\5\1\107\3\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\6\5\1\110\16\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\20\5\1\111\4\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\3\5\1\112"+
    "\21\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\11\5\1\113\13\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\14\5\1\114\10\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\3\5\1\115\21\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\2\5\1\116"+
    "\22\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\20\5\1\117\4\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\11\5\1\120\13\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\23\5\1\121\1\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\12\5\1\65"+
    "\12\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\17\5\1\122\5\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\1\5\1\123\23\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\12\5\1\124\12\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\16\5\1\125"+
    "\6\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\2\5\1\126\22\5\71\0\1\127\6\0\1\130\2\0"+
    "\1\131\45\0\1\131\6\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\3\5\1\132\21\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\6\5\1\133\16\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\20\5\1\134"+
    "\4\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\3\5\1\135\21\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\7\5\1\136\15\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\15\5\1\137\7\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\16\5\1\110"+
    "\6\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\4\5\1\140\20\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\12\5\1\141\12\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\15\5\1\142\7\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\14\5\1\143"+
    "\10\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\2\5\1\144\22\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\20\5\1\145\4\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\6\5\1\146\16\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\20\5\1\147"+
    "\4\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\14\5\1\150\10\5\71\0\1\151\6\0\1\130\57\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\4\5\1\152"+
    "\20\5\20\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\1\5\1\153\23\5\20\0\1\5\1\0\1\5\1\0"+
    "\2\5\5\0\4\5\1\154\20\5\20\0\1\5\1\0"+
    "\1\5\1\0\2\5\5\0\2\5\1\155\22\5\20\0"+
    "\1\5\1\0\1\5\1\0\2\5\5\0\24\5\1\156"+
    "\20\0\1\5\1\0\1\5\1\0\2\5\5\0\3\5"+
    "\1\157\21\5\20\0\1\5\1\0\1\5\1\0\2\5"+
    "\5\0\7\5\1\160\15\5\20\0\1\5\1\0\1\5"+
    "\1\0\2\5\5\0\20\5\1\161\4\5\17\0\12\151"+
    "\2\0\36\151\1\162\5\151\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\5\0\3\5\1\163\21\5\20\0\1\5"+
    "\1\0\1\5\1\0\2\5\5\0\3\5\1\164\21\5"+
    "\20\0\1\5\1\0\1\5\1\0\2\5\5\0\4\5"+
    "\1\165\20\5\17\0\12\151\2\0\36\151\1\166\5\151"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\5\0\6\5"+
    "\1\167\16\5\17\0\12\151\2\0\36\151\1\166\1\170"+
    "\4\151\1\0\1\5\1\0\1\5\1\0\2\5\5\0"+
    "\20\5\1\171\4\5\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3984];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\20\1\7\11"+
    "\4\1\1\11\1\1\1\11\31\1\2\11\1\0\1\11"+
    "\1\0\23\1\1\0\1\1\1\0\17\1\1\0\10\1"+
    "\1\0\3\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  public Parser   parser;
  public int      lineno;
  public int      column;

  public Lexer(java.io.Reader r, Parser parser) {
    this(r);
    this.parser = parser;
    this.lineno = 1;
    this.column = 1;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Error: unexpected character '"+yytext()+"'"); return -1;
            }
          case 40: break;
          case 2: 
            { parser.yylval = new ParserVal((Object)yytext()); return Parser.INT_VALUE    ;
            }
          case 41: break;
          case 3: 
            { parser.yylval = new ParserVal(null            ); return Parser.DOT          ;
            }
          case 42: break;
          case 4: 
            { parser.yylval = new ParserVal((Object)yytext()); return Parser.IDENT        ;
            }
          case 43: break;
          case 5: 
            { parser.yylval = new ParserVal((Object)yytext()); return Parser.OP           ;
            }
          case 44: break;
          case 6: 
            { System.out.print(yytext());                                        /* skip */
            }
          case 45: break;
          case 7: 
            { parser.yylval = new ParserVal(null            ); return Parser.LPAREN       ;
            }
          case 46: break;
          case 8: 
            { parser.yylval = new ParserVal(null            ); return Parser.RPAREN       ;
            }
          case 47: break;
          case 9: 
            { parser.yylval = new ParserVal(null            ); return Parser.LBRACKET     ;
            }
          case 48: break;
          case 10: 
            { parser.yylval = new ParserVal(null            ); return Parser.RBRACKET     ;
            }
          case 49: break;
          case 11: 
            { parser.yylval = new ParserVal(null            ); return Parser.SEMI         ;
            }
          case 50: break;
          case 12: 
            { parser.yylval = new ParserVal(null            ); return Parser.COMMA        ;
            }
          case 51: break;
          case 13: 
            { parser.yylval = new ParserVal(null            ); return Parser.ADDR         ;
            }
          case 52: break;
          case 14: 
            { parser.yylval = new ParserVal((Object)yytext()); return Parser.RELOP        ;
            }
          case 53: break;
          case 15: 
            { System.err.println("Sorry, backspace doesn't work");
            }
          case 54: break;
          case 16: 
            { parser.yylval = new ParserVal((Object)yytext()); return Parser.FLOAT_VALUE  ;
            }
          case 55: break;
          case 17: 
            { parser.yylval = new ParserVal(null            ); return Parser.IF           ;
            }
          case 56: break;
          case 18: 
            { parser.yylval = new ParserVal(null            ); return Parser.TYPEOF       ;
            }
          case 57: break;
          case 19: 
            { parser.yylval = new ParserVal(null            ); return Parser.ASSIGN       ;
            }
          case 58: break;
          case 20: 
            { parser.yylval = new ParserVal(null            ); return Parser.FUNCRET      ;
            }
          case 59: break;
          case 21: 
            { parser.yylval = new ParserVal(null            ); return Parser.INT          ;
            }
          case 60: break;
          case 22: 
            { parser.yylval = new ParserVal(null            ); return Parser.NEW          ;
            }
          case 61: break;
          case 23: 
            { parser.yylval = new ParserVal(null            ); return Parser.END          ;
            }
          case 62: break;
          case 24: 
            { parser.yylval = new ParserVal((Object)yytext()); return Parser.BOOL_VALUE   ;
            }
          case 63: break;
          case 25: 
            { parser.yylval = new ParserVal(null            ); return Parser.THEN         ;
            }
          case 64: break;
          case 26: 
            { parser.yylval = new ParserVal(null            ); return Parser.FUNC         ;
            }
          case 65: break;
          case 27: 
            { parser.yylval = new ParserVal(null            ); return Parser.VOID         ;
            }
          case 66: break;
          case 28: 
            { parser.yylval = new ParserVal(null            ); return Parser.BOOL         ;
            }
          case 67: break;
          case 29: 
            { parser.yylval = new ParserVal(null            ); return Parser.SIZE         ;
            }
          case 68: break;
          case 30: 
            { parser.yylval = new ParserVal(null            ); return Parser.ELSE         ;
            }
          case 69: break;
          case 31: 
            { parser.yylval = new ParserVal(null            ); return Parser.PRINT        ;
            }
          case 70: break;
          case 32: 
            { parser.yylval = new ParserVal(null            ); return Parser.FLOAT        ;
            }
          case 71: break;
          case 33: 
            { parser.yylval = new ParserVal(null            ); return Parser.BREAK        ;
            }
          case 72: break;
          case 34: 
            { parser.yylval = new ParserVal(null            ); return Parser.BEGIN        ;
            }
          case 73: break;
          case 35: 
            { parser.yylval = new ParserVal(null            ); return Parser.WHILE        ;
            }
          case 74: break;
          case 36: 
            { parser.yylval = new ParserVal(null            ); return Parser.RETURN       ;
            }
          case 75: break;
          case 37: 
            { parser.yylval = new ParserVal(null            ); return Parser.STRUCT       ;
            }
          case 76: break;
          case 38: 
            { System.out.print(yytext());
            }
          case 77: break;
          case 39: 
            { parser.yylval = new ParserVal(null            ); return Parser.CONTINUE     ;
            }
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
